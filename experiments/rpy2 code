# common to all
for x in keys:
	if float(d4[x]):
		y.append(d4[x])
	else:
		y.append(0)
for x in keys:
	print type(d4[x]), d4[x])
for x in keys:
	print type(d4[x]), d4[x]

type(d4[keys[-11]]) == type(None)

for x in keys:
	if type(d4[x]) != type(None):
		y.append(d4[x])
	else:
		y.append(0)

res = FloatVector(y)

from rpy2.robjects import FloatVector
from rpy2.robjects.packages import importr
importr('stats')
stats = importr('stats')

y, y1 = [], []
for x in keys:
	if type(d3[x][0]) != type(None):
		y.append(d3[x][0])
	else:
		y.append(0)
	if type(d3[x][1]) != type(None):
		y1.append(d3[x][1])
	else:
		y1.append(0)

v1 = FloatVector(map(float, y))
v2 = FloatVector(map(float, y1))

lmr = stats.lm("res ~ v1 + v2")

base = importr('base')
import rpy2.robjects as robjects

robjects.globalenv['res'] = res
robjects.globalenv['v1'] = v1
robjects.globalenv['v2'] = v2

lmr = stats.lm("res ~ v1 + v2")
print(base.summary(lmr))


############### More snippets ##################
import array
from rpy2.robjects import IntVector, Formula
from rpy2.robjects.packages import importr
stats = importr('stats')

x = IntVector(range(1, 11))
y = x.ro + stats.rnorm(10, sd=0.2)

fmla = Formula('y ~ x')
env = fmla.environment
env['x'] = x
env['y'] = y

fit = stats.lm(fmla)

